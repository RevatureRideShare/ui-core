#!/bin/bash

pipeline {
    agent any
    triggers {
        pollSCM('H H/8 * * *')
    }    
    options { 
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '6', daysToKeepStr: '14')) 
    }
    stages {
        stage('Pre-Build') {
            steps {
                echo 'Directory before'
                sh 'pwd'
                deleteDir()
                checkout scm
            }
        }
        stage('Install') {
            steps {
                sh '''
                    . ~/.nvm/nvm.sh
                    ls -alh
                    cd RideShare
		            npm install
                '''
            }
         }

         stage('SonarQube Analysis'){
             steps{
                 sh '''
                export SONAR_SCANNER_VERSION=4.2.0.1873
                export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
                export PATH=$SONAR_SCANNER_HOME/bin:$PATH
                export SONAR_SCANNER_OPTS="-server"
                sonar-scanner \
                -Dsonar.projectKey=RevatureRideShare_ui-core \
                -Dsonar.organization=b44ffadc-08d5-11ea-8d71-362b9e155667 \
                -Dsonar.sources=. \
                -Dsonar.host.url=https://sonarcloud.io/ \
                -Dsonar.login=f13453caf6dccc2ca1b0957363483278a174f20b
                 '''
             }
         }

         stage('Quality Gate'){
             steps{
                waitForQualityGate abortPipeline: true
             }
         }

        // stage('Karma Test') {
        //       steps {
        //         sh '''
        //             . ~/.nvm/nvm.sh
        //             cd RideShare
        //             npm run test-headless
        //         '''
        //     }
        // }
        // stage('Build') {
        //       steps {
        //         sh '''
        //             . ~/.nvm/nvm.sh 
        //             cd RideShare                   
		//             ng build
        //         '''
        //     }
        // }
        // stage('Deploy') {
        //       steps {
        //         script{
        //           if(env.BRANCH_NAME == 'chore/master'){
        //             sh '''
        //                 cd RideShare
        //                 aws s3 cp --recursive ./dist/Project3 s3://rideshare-client
        //             '''
        //           }
        //         }
        //     }
        // }
    }
    post{
        always{
            echo 'Directory after ' + env.BRANCH_NAME
            sh 'pwd'
            deleteDir()
        }
    }
}