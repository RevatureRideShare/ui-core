#!/bin/bash

pipeline {
    agent any
    triggers {
        pollSCM('H H/8 * * *')
    }    
    options { 
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '6', daysToKeepStr: '14')) 
    }
    stages {
        stage('Pre-Build') {
            steps {
                echo 'Directory before'
                sh 'pwd'
                deleteDir()
                checkout scm
            }
        }

        // stage('Install') {
        //     steps {
        //         sh '''
        //             . ~/.nvm/nvm.sh
        //             ls -alh
        //             cd RideShare
		//             npm install
        //         '''
        //     }
        //  }

        //  stage('Build') {
        //       steps {
        //         sh '''
        //             . ~/.nvm/nvm.sh 
        //             cd RideShare                   
		//             ng build
        //         '''
        //     }
        // }

         stage('SonarQube Analysis'){

              if (env.CHANGE_ID) {
                echo "PR request: $env.CHANGE_ID"
                }
            else{
             steps{
                // echo env.CHANGE_URL.split("/")
                // echo urlcomponents[3]
                // echo urlcomponents[4]
                echo "Slack cmnd"
                echo "${env.BRANCH_NAME}"
                echo "${env.BUILD_DISPLAY_NAME}"
                echo "${env.JOB_BASE_NAME}"
                echo "${env.JOB_NAME}"
                echo "${env.GIT_LOCAL_BRANCH}"
                slackSend message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

                 withSonarQubeEnv(credentialsId: 'b44ffadc-08d5-11ea-8d71-362b9e155667', installationName:'SonarCloud'){
                    sh '''
                    . ~/.nvm/nvm.sh
                    export SONAR_SCANNER_VERSION=4.2.0.1873
                    export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
                    export PATH=$SONAR_SCANNER_HOME/bin:$PATH
                    export SONAR_SCANNER_OPTS="-server"
                    
                    sonar-scanner \
                    -Dsonar.projectKey=RevatureRideShare_ui-core \
                    -Dsonar.organization=b44ffadc-08d5-11ea-8d71-362b9e155667 \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=https://sonarcloud.io/ \
                    -Dsonar.login=f13453caf6dccc2ca1b0957363483278a174f20b 
                    '''
                    }
                }
            }
                    // -Dsonar.pullrequest.provider=GitHub \
                    // -Dsonar.pullrequest.github.repository=${org}/${repo} \
                    // -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                    // -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH}
         }

        //   stage("Quality Gate") {
        //     // steps {
        //     //     script{
        //     //      timeout(time: 1, unit: 'MINUTES'){
        //     //         def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
        //     //             echo ${qg.status}
        //     //             if (qg.status == 'OK') {
        //     //             error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //     //         } 
        //     //         }                
        //     //     }
        //     // }              
        //     steps {
        //          timeout(time: 1, unit: 'MINUTES'){
        //             waitForQualityGate abortPipeline: true
        //             script{
        //                 def sonarUrl = 
        //                 slackSend "SonarCloud analysis for - ${env.JOB_NAME} ${env.BUILD_NUMBER}"+
        //                 " (https://sonarcloud.io/dashboard?id=RevatureRideShare_+ ${env.PROJECT_NAME}" +")"
        //                 }
        //             }
        //         }
        //   }
        
        // stage('Karma Test') {
        //       steps {
        //         sh '''
        //             . ~/.nvm/nvm.sh
        //             cd RideShare
        //             npm run test-headless
        //         '''
        //     }
        // }

        
        stage('Deploy') {
              steps {
                script{
                  if(env.BRANCH_NAME == 'master'){
                    sh '''
                        cd RideShare
                        aws s3 cp --recursive ./dist/Project3 s3://rideshare-client
                    '''
                  }
                }
            }
        }
    }
    post{
        always{
            echo 'Directory after ' + env.BRANCH_NAME
            deleteDir()
        }
    }
}