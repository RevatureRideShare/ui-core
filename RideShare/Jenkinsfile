#!groovy

pipeline {
    agent any
    triggers {
        pollSCM('H H/8 * * *')
    }    
    options { 
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '6', daysToKeepStr: '7')) 
    }
    environment{
        SONAR_SCANNER_VERSION="4.2.0.1873"
        SONAR_SCANNER_HOME="$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux"
        PATH="$SONAR_SCANNER_HOME/bin:$PATH"
        SONAR_SCANNER_OPTS="-server" 
        ORG="RevatureRideShare"
        REPO="ui-core"       
    }

    stages {
        stage('Clean and checkout') {
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage('NPM Install') {
            steps {
                sh '''
                    . ~/.nvm/nvm.sh
                    ls -alh
                    cd RideShare
		            npm install
                '''
            }
         }

        stage('Karma Test') {
              steps {
                script{
                  try{
                    sh '''
                        . ~/.nvm/nvm.sh
                        cd RideShare
                        npm run test-headless
                    '''
                  }catch(err){
                        echo "Caught: ${err}"
                        currentBuild.result = 'UNSTABLE'
                  }
                }
            }
        }               

         stage('Ng Build') {
              steps {
                sh '''
                    . ~/.nvm/nvm.sh 
                    cd RideShare                   
		            ng build
                '''
            }
        }
         stage('SonarQube Analysis'){
            steps{
                script{
                    if (env.CHANGE_ID) {
                        echo 'Pull Request Detected...'
                        def urlcomponents = env.CHANGE_URL.split("/")
                        def organization = urlcomponents[3]
                        def repository = urlcomponents[4]

                        withSonarQubeEnv(credentialsId: 'b44ffadc-08d5-11ea-8d71-362b9e155667', installationName:'SonarCloud'){                           
                            sh """
                            . ~/.nvm/nvm.sh
                            cd RideShare
                             sonar-scanner 
                                -Dsonar.pullrequest.base=${env.CHANGE_TARGET} \
                                -Dsonar.pullrequest.provider=GitHub \
                                -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                                -Dsonar.pullrequest.github.repository=${env.ORG}/${env.REPO} \
                                -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH}
                            """
                        }
                    }   else{
                            withSonarQubeEnv(credentialsId: 'b44ffadc-08d5-11ea-8d71-362b9e155667', installationName:'SonarCloud'){
                                sh '''
                                . ~/.nvm/nvm.sh
                                cd RideShare
                                sonar-scanner \
                                -Dsonar.projectKey=RevatureRideShare_ui-core \
                                -Dsonar.organization=b44ffadc-08d5-11ea-8d71-362b9e155667 \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=https://sonarcloud.io/ \
                                -Dsonar.login=f13453caf6dccc2ca1b0957363483278a174f20b 
                                '''
                            }
                    }   
                }
            }
        }  
                                // -Dsonar.test=RideShare/src/app \
                                // -Dsonar.test.inclusions=RideShare/**/*.spec.ts \
                                // -Dsonar.tests=RideShare/**/*.spec.ts \
          stage("Quality Gate") {
            // steps {
            //     script{
            //      timeout(time: 1, unit: 'MINUTES'){
            //         def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
            //             echo ${qg.status}
            //             if (qg.status == 'OK') {
            //             error "Pipeline aborted due to quality gate failure: ${qg.status}"
            //         } 
            //         }                
            //     }
            // }              
            steps {
                echo "check2"
                withSonarQubeEnv(credentialsId: 'b44ffadc-08d5-11ea-8d71-362b9e155667', installationName:'SonarCloud'){
                    timeout(time: 3, unit: 'MINUTES'){
                        waitForQualityGate abortPipeline: true
                    }
                    script{
                        def urlComponents = env.JOB_NAME.split("/")
                        def urlJobName = urlComponents[0]
                        def urlSonarCloudLink = "https://sonarcloud.io/dashboard?id=RevatureRideShare_"+urlJobName
                        slackSend message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>) "+
                        "View the SonarCloud analysis - "+urlSonarCloudLink
                    }
                }
            }
          }
        
        stage('Deploy') {
              steps {
                  echo "check 3"
                script{
                  if(env.BRANCH_NAME == 'master' ){
                    sh '''
                        cd RideShare
                        aws s3 cp --recursive ./dist/Project3 s3://rideshare-client
                    '''
                  }
                }
            }
        }
    }
    post{
        always{
            deleteDir()
        }
    }
}